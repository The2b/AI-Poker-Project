@author Thomas Lenz <thomas.lenz96@gmail.com> AS The2b
@date 13 April 2018
@project Texas Hold'em AI

As the days wind down, I figure I should write a quick profiling note.

	With the profiler attached, the program took 21.012 seconds to run one game.
		Of those 21.012 seconds, 21.005 of them were spent in the "makeDecision" function or its subroutines. Considering this is the main logic, this is to be expected.
			It's worth noting that since this was over 8 calls to the function, as I skewed the pot odds to force both agents to be forced to play no matter what, each call to this function took 2.626 seconds, on average. This is over all four stages, not just the bottleneck of the turn's call
		The turn's odds calculations for the opponent took 16.822 seconds total over 2 calls, or 8.411 seconds on average. This is multi-processed, with 12 processes at any given time. The super-computer nodes have 6 cores on them, over 2 CPU's and no HyperThreading. The 12 was chosen to abuse the scheduler's time-slice distribution.
			The agent's took 1.018 seconds over 2 calls, 0.509 avg. Makes sense, the oppo one was expected to take FAR longer due to the additional 2 cards in the hand we don't see
                        	This is also in line with the river calcs, as the oppo's river calcs took 2.441 seconds total over 2 calls, 1.220 seconds avg, with only 1 more card to sim than the turn's agent. That makes ~ an 8x increase for the additional card, which isn't unreasonable, since it's exponential per card we need to calc.


	Without the profiler attached, we're running at an average of 12.403 seconds for a full game. This means everything else should be around (4/7) * its listed speed above

That's pretty much it. Everything makes sense in terms of time, at least on a scalar level, so there shouldn't be much to fix. While I can see some optimizations, they're not really worth it IMO with the time I have left. Still, if I take this project further, it's definitely something I could do. Until then, I'm going to work on the front end, implementing a CLI to let a user play against it, and a more effective money-management system.
